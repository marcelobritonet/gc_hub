{"version":3,"sources":["shared/constants/constants.ts","shared/services/group/group.service.ts","containers/group-lead/GroupLead.tsx","containers/group-lead-list/GroupLeadList.tsx","containers/group-list/GroupList.tsx","shared/services/google-maps-plataform/google-maps-plataform.service.ts","shared/components/maps/maps.service.ts","shared/services/google-maps-plataform/google-maps-plataform.constants.ts","shared/services/util/util.service.ts","shared/services/google-maps-plataform/google-maps-plataform.api.ts","shared/services/viacep/viacep.api.ts","shared/components/maps/Maps.tsx","containers/my-group/MyGroup.tsx","containers/home/Home.tsx","shared/components/switch_route/SwitchRoute.tsx","shared/components/navigation/Navigation.tsx","App.tsx","serviceWorker.js","actions/actionTypes.ts","reducers/clickReducer.ts","reducers/index.ts","store/index.ts","index.js"],"names":["GroupType","CEP_REGEX","getGroupLeadList","a","fetch","response","json","getLead","alias","leadList","find","list","getGroupList","data","buildGroupList","map","item","name","groupName","groupTypeId","address","buildGroupItem","connect","store","dispatch","bindActionCreators","useState","lead","setLead","useParams","useEffect","initGroupLeadList","nome","telefone","to","undefined","leadGroupList","setLeadGroupList","index","key","groupList","setGroupList","initGroupList","buildDistanceList","destinations","destination_addresses","rows","elements","distance","duration","fare","status","fullAddress","filter","orderDistanceListByDistance","sort","b","value","orderDistanceListByFare","traficModes","label","mode","transitModes","PROXY_URL","cleanEmptyPropetiesFromObjects","obj","JSON","parse","stringify","getDistanceMatrix","distanceParams","params","getDestinationAddress","buildUrlDestinationParams","origins","buildUrlOriginsParams","queryString","buildUrlQueryString","url","fetchDistanceMatrix","groups","group","destinationsQueryString","join","replace","originsQueryString","str","p","hasOwnProperty","push","encodeURIComponent","serialize","getAddessByCep","cep","Maps","traficModeSelect","useRef","transitModeSelect","originCepInput","originCep","setOriginCep","setAddress","traficMode","setTraficMode","transitMode","setTransitMode","sortBy","setSortBy","setDistance","loading","setLoading","getDistance","transit_mode","addressList","getAddress","handleTraficMode","current","handelTransitMode","type","ref","onKeyUp","match","exec","disabled","logradouro","complemento","bairro","localidade","uf","id","onChange","onClick","text","SwitchRoute","path","Navigation","Title","styled","div","Boolean","window","location","hostname","initialState","newValue","Reducers","combineReducers","clickState","state","action","Store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gJAAYA,E,sHAAAA,O,mBAAAA,I,eAAAA,I,qBAAAA,I,qBAAAA,I,eAAAA,I,sBAAAA,M,KASL,IAAMC,EAAY,mB,SCNVC,I,2EAAf,4BAAAC,EAAA,sEACqCC,MAAM,sBAD3C,cACUC,EADV,gBAEiBA,EAASC,OAF1B,oF,+BAKeC,E,8EAAf,WAAuBC,GAAvB,eAAAL,EAAA,sEACyCD,IADzC,cACUO,EADV,yBAEWA,EAASC,MAAK,SAACC,GAAD,OAAsBA,EAAKH,QAAUA,MAF9D,4C,+BAKeI,I,2EAAf,8BAAAT,EAAA,sEACqCC,MAAM,sBAD3C,cACUC,EADV,gBAEyCA,EAASC,OAFlD,cAEUO,EAFV,yBAGWC,EAAeD,IAH1B,4C,sBAMA,SAASC,EAAeH,GACpB,OAAOA,EAAKI,KAAI,SAAAC,GAAI,OAGxB,SAAwBA,GACpB,MAAQ,CACJC,KAAMD,EAAKC,KACXC,UAAWlB,EAAUgB,EAAKG,aAC1BC,QAASJ,EAAKI,SAPMC,CAAeL,MCW3C,IASeM,eAJS,SAACC,GAAD,MAAiB,MALd,SAACC,GAAD,OACvBC,YAAmB,GAEhBD,KAMQF,EAjCf,WAAsB,IAAD,EACOI,qBADP,mBACVC,EADU,KACJC,EADI,KAETpB,EAAUqB,cAAVrB,MAERsB,qBAAU,WACNtB,GAASuB,EAAkBvB,KAC5B,IAEH,IAAMuB,EAAiB,uCAAG,WAAOvB,GAAP,eAAAL,EAAA,sEACqBI,EAAQC,GAD7B,OAChBmB,EADgB,OAEtBC,EAAQD,GAFc,2CAAH,sDAKvB,OAAO,6BACDA,GACE,6BACI,2BAAIA,EAAKK,MACT,2BAAIL,EAAKM,WAGjB,kBAAC,IAAD,CAAMC,GAAG,YAAT,cCSR,IASeZ,eAJS,SAACC,GAAD,MAAiB,MALd,SAACC,GAAD,OACvBC,YAAmB,GAEhBD,KAMQF,EAtCf,WAA0B,IAAD,EACqBI,wBAAmCS,GADxD,mBACdC,EADc,KACCC,EADD,KAGrBP,qBAAU,WACNC,MACD,IAEH,IAAMA,EAAiB,uCAAG,4BAAA5B,EAAA,sEACWD,IADX,OAChBS,EADgB,OAEtB0B,EAAiB1B,GAFK,2CAAH,qDAKvB,OACI,6BACI,0CACA,4BAEQyB,GAAiBA,EAAcrB,KAAI,SAACJ,EAAkB2B,GAAnB,OAC/B,wBAAIC,IAAKD,GACL,kBAAC,IAAD,CAAMJ,GAAE,gBAAWvB,EAAKH,QAAUG,EAAKqB,MACvC,2BAAIrB,EAAKsB,mBCSrC,IASeX,eAJS,SAACC,GAAD,MAAiB,MALd,SAACC,GAAD,OACvBC,YAAmB,GAEhBD,KAMQF,EAvCf,WAAsB,IAAD,EACiBI,qBADjB,mBACVc,EADU,KACCC,EADD,KAGjBX,qBAAU,WACNY,MACD,IAEH,IAAMA,EAAa,uCAAG,4BAAAvC,EAAA,sEACWS,IADX,OACZD,EADY,OAElB8B,EAAa9B,GAFK,2CAAH,qDAKnB,OACI,6BACI,qDACA,4BAEQ6B,GAAaA,EAAUzB,KAAI,SAACJ,EAAc2B,GAAf,OACvB,wBAAIC,IAAKD,GACL,2BAAI3B,EAAKM,MACT,2BAAIN,EAAKS,kBCrBrC,SAASuB,EAAkBhC,EAA+BiC,GACtD,OAAOjC,EAAKkC,sBACP9B,KAAI,SAACK,EAAiBkB,GAAoC,IAAD,EACT3B,EAAKmC,KAAK,GAAGC,SAAST,GAA3DU,EAD8C,EAC9CA,SAAUC,EADoC,EACpCA,SAAUC,EAD0B,EAC1BA,KAAMC,EADoB,EACpBA,OAElC,MAAO,CACHC,YAAahC,EACbA,QAASwB,EAAaN,GACtBU,WACAC,WACAC,OACAC,aAGPE,QAAO,SAACjC,GAAD,MACe,OAAnBA,EAAQ+B,QACL/B,EAAQ4B,UACR5B,EAAQ6B,YAIvB,SAASK,EAA4B3C,GACjC,OAAOA,EAAK4C,MAAK,SAACpD,EAAoBqD,GAArB,OACbrD,EAAE6C,SAASS,MAAQD,EAAER,SAASS,SAQtC,SAASC,EAAwB/C,GAC7B,OAAOA,EAAK4C,MAAK,SAACpD,EAAoBqD,GAArB,OACbrD,EAAE+C,KAAKO,MAAQD,EAAEN,KAAKO,SCpC9B,IAAME,EAAoC,CACtC,CACIC,MAAO,YACPC,KAAM,WACP,CACCD,MAAO,UACPC,KAAM,WACP,CACCD,MAAO,YACPC,KAAM,aACP,CACCD,MAAO,wBACPC,KAAM,YAIRC,EAAsC,CACxC,CACIF,MAAO,YACPC,KAAM,OACP,CACCD,MAAO,WACPC,KAAM,UACP,CACCD,MAAO,OACPC,KAAM,U,QCzBRE,EAAY,uCCuBlB,SAASC,EAA+BC,GACpC,OAAOC,KAAKC,MAAMD,KAAKE,UAAUH,I,SCbtBI,E,8EAAf,WAAiCC,GAAjC,yBAAAnE,EAAA,6DACUoE,EAAmCP,EAA+BM,GAD5E,SAEoCE,IAFpC,cAEUpD,EAFV,OAGUwB,EAAuB6B,EAA0BrD,GACjDsD,EAAkBC,EAAsBJ,GACxCK,EAAsBC,EAAoBN,EFjBd,2CEkB5BO,EANV,UAM2Bf,EAN3B,oEAMgGa,GANhG,OAM8GF,GAN9G,OAMwH9B,GANxH,UAOiBmC,EAAoBD,EAAK1D,GAP1C,sF,+BAUeoD,I,2EAAf,4BAAArE,EAAA,sEACmCS,IADnC,cACUoE,EADV,yBAEWA,EAAOjE,KAAI,SAAAkE,GAAK,OAAIA,EAAM7D,YAFrC,4C,sBAKA,SAASqD,EAA0BrD,GAC/B,IAAM8D,EAA0B9D,EAAQ+D,KAAK,KAAKC,QAAQ,KAAM,KAChE,MAAM,iBAAN,OAAwBF,GAG5B,SAASP,EAAsBJ,GAC3B,IAAMc,EAAqBd,EAAOG,QAAQS,KAAK,KAAKC,QAAQ,KAAM,KAClE,MAAM,YAAN,OAAmBC,GAGvB,SAASR,EAAoBN,EAAmChC,GAK5D,OD3Cc,WAAoB,IAAnB0B,EAAkB,uDAAP,GACpBqB,EAAM,GAEZ,IAAK,IAAMC,KAAKtB,EACRA,EAAIuB,eAAeD,IACnBD,EAAIG,KAAKC,mBAAmBH,GAAK,IAAMG,mBAAmBzB,EAAIsB,KAItE,OAAOD,EAAIH,KAAK,KCkCTQ,CAJ8C,eAC9CpB,EAD8C,CAEjDhC,S,SAKOwC,E,gFAAf,WAAmCD,EAAalC,GAAhD,iBAAAzC,EAAA,sEACqCC,MAAM0E,GAD3C,cACUzE,EADV,gBAEgDA,EAASC,OAFzD,cAEUO,EAFV,yBAGW8B,EAAkB9B,EAAM+B,IAHnC,4C,+BC5CegD,E,8EAAf,WAA8BC,GAA9B,iBAAA1F,EAAA,6DACU2E,EADV,mCACoDe,EADpD,mBAEqCzF,MAAM0E,GAF3C,cAEUzE,EAFV,gBAGiBA,EAASC,OAH1B,oF,sBC0MewF,MA1Lf,WACI,IAAMC,EAAmBC,iBAAO,MAC1BC,EAAoBD,iBAAO,MAC3BE,EAAiBF,iBAAO,MAHlB,EAKsBtE,mBAAiB,IALvC,mBAKLyE,EALK,KAKMC,EALN,OAMkB1E,qBANlB,mBAMLN,EANK,KAMIiF,EANJ,OAOwB3E,qBAPxB,mBAOL4E,EAPK,KAOOC,EAPP,OAQ0B7E,qBAR1B,mBAQL8E,EARK,KAQQC,EARR,OASgB/E,qBAThB,mBASLgF,EATK,KASGC,EATH,OAUoBjF,qBAVpB,mBAULsB,EAVK,KAUK4D,EAVL,OAWkBlF,oBAAkB,GAXpC,mBAWLmF,EAXK,KAWIC,EAXJ,KAaNC,EAAW,uCAAG,8BAAA5G,EAAA,6DAChByG,OAAYzE,GACZ2E,GAAW,GAELvC,EAAoC,CACtCG,QAAS,CAACyB,GACVtC,KAAMyC,EACNU,aAAcR,GAPF,SAU6BnC,EAAkBE,GAV/C,OAUV0C,EAVU,YAYRP,EAZQ,OAaP,WAbO,OAgBP,YAhBO,QAmBP,UAnBO,+BAcRE,EAAwCK,ENbxC1D,MAAK,SAACpD,EAAoBqD,GAArB,OACbrD,EAAE8C,SAASQ,MAAQD,EAAEP,SAASQ,UMFd,oCAiBRmD,EAAYtD,EAA4B2D,IAjBhC,oCAoBRL,EAAYlD,EAAwBuD,IApB5B,6BAuBRL,EAAYtD,EAA4B2D,IAvBhC,QA0BhBH,GAAW,GA1BK,4CAAH,qDA6BXI,EAAU,uCAAG,WAAOrB,GAAP,eAAA1F,EAAA,0DACC0F,EADD,gCACaD,EAAeC,GAD5B,mDACmC1D,EADnC,cACTf,EADS,eAETiF,EAAWjF,GAFF,4CAAH,sDAYV+F,EAAmB,WAErBZ,EAAcR,EAAiBqB,QAAQ3D,QAGrC4D,EAAoB,WAEtBZ,EAAeR,EAAkBmB,QAAQ3D,QAoB7C,OAjBA3B,qBAAU,WACNqF,IACAD,EAAWf,KACZ,CAACA,IAEJrE,qBAAU,WACY,YAAfwE,EACCe,IAEAZ,OAAetE,KAEpB,CAACmE,IAEJxE,qBAAU,WACNqE,GAAaO,GAAUK,MACxB,CAACL,EAAQP,EAAWG,EAAYE,IAE5B,6BACH,oCAEA,0CAEI,2BAAOc,KAAK,OACLC,IAAKrB,EACLsB,QAzCS,WAEpB,IAAM/D,EAAQyC,EAAekB,QAAQ3D,MAC/BgE,EAAQxH,EAAUyH,KAAKjE,GAC7BgE,GAASrB,EAAaqB,EAAM,KAsCjBE,SAAUd,KAKjBzF,GACI,6BACI,2BAAIA,EAAQyE,KACZ,2BAAIzE,EAAQwG,YACZ,2BAAIxG,EAAQyG,aACZ,2BAAIzG,EAAQ0G,QACZ,2BAAI1G,EAAQ2G,YACZ,2BAAI3G,EAAQ4G,KAIxB,6BAEA,8CAEI,4BAAQ/G,KAAK,GAAGgH,GAAG,GACXV,IAAKxB,EACLmC,SAAUf,EACVQ,SAAUd,GAGVlD,EAAY5C,KAAI,SAAC8C,EAA0BvB,GAA3B,OACZ,4BACIC,IAAKD,EACLmB,MAAOI,EAAKA,MACdA,EAAKD,YAMvB,6BAGmB,YAAf0C,GAA4B,kEAExB,4BAAQrF,KAAK,GAAGgH,GAAG,GACXV,IAAKtB,EACLiC,SAAUb,EACVM,SAAUd,GAGV/C,EAAa/C,KAAI,SAAC8C,EAA2BvB,GAA5B,OACb,4BACIC,IAAKD,EACLmB,MAAOI,EAAKA,MACdA,EAAKD,YAO3B,6BAEA,4BACIuE,QAAS,kBAAMxB,EAAU,YACzBgB,UAAWxB,GAAaU,GAF5B,yCAKA,6BAEA,4BACIsB,QAAS,kBAAMxB,EAAU,WACzBgB,UAAWxB,GAAaU,GAF5B,yCAKA,6BAGIL,GACA,4BACI2B,QAAS,kBAAMxB,EAAU,UACzBgB,UAAWxB,GAAaU,GAF5B,iBAMJ,4BAEQ7D,GAAYA,EAASjC,KAAI,SAACC,EAAuBsB,GAAxB,aACrB,wBAAIC,IAAKD,GACL,2BAAKtB,EAAKI,SACV,2BAAKJ,EAAKgC,SAASoF,MACnB,2BAAKpH,EAAKiC,SAASmF,MACnB,qCAAKpH,EAAKkC,YAAV,aAAK,EAAWkF,aCtLxC,IASe9G,eAJS,SAACC,GAAD,MAAiB,MALd,SAACC,GAAD,OACvBC,YAAmB,GAEhBD,KAMQF,EAlBf,WACI,OACI,6BACI,yCACA,kBAAC,EAAD,UCMZ,IASeA,eAJS,SAACC,GAAD,MAAiB,MALd,SAACC,GAAD,OACvBC,YAAmB,GAEhBD,KAMQF,EAnBf,WACI,OACI,6BACI,oDACA,gHACA,kBAAC,IAAD,CAAMY,GAAG,aAAT,4BCsBGmG,MAxBf,WACI,OACI,kBAAC,IAAD,KAGI,kBAAC,IAAD,CAAOC,KAAK,iBACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,YACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,WACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,aACR,kBAAC,EAAD,OAEJ,kBAAC,IAAD,CAAOA,KAAK,KACR,kBAAC,EAAD,SCFDC,MArBf,WACI,OACI,6BACI,4BACI,4BACI,kBAAC,IAAD,CAAMrG,GAAG,KAAT,SAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,YAAT,eAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,WAAT,0BAEJ,4BACI,kBAAC,IAAD,CAAMA,GAAG,aAAT,0B,4FCGpB,IAAMsG,GAAQC,IAAOC,IAAV,KAaIpH,gBAJS,SAACC,GAAD,MAAiB,MALd,SAACC,GAAD,OACvBC,YAAmB,GAEhBD,KAMQF,EAzBf,WACE,OACI,kBAAC,IAAD,KACE,6BACE,kBAACkH,GAAD,eACA,kBAAC,EAAD,MACA,kBAAC,EAAD,WCFUG,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASrB,MACvB,2DClBC,ICCDsB,GAAe,CACjBC,SAAU,yBCCP,IAAMC,GAAWC,YAAgB,CACpCC,WDAJ,WAAoF,IAA9DC,EAA6D,uDAArDL,GAAcM,EAAuC,uCAC/E,OAAQA,EAAO/B,MACX,IDN0B,qBCOtB,OAAO,eACA8B,EADP,CAEIJ,SAAUK,EAAOL,WAEzB,QACI,OAAOI,MEVNE,GAAQC,YAAYN,ICKjCO,IAASC,OACP,kBAAC,IAAMC,WAAP,KACI,kBAAC,IAAD,CAAUnI,MAAO+H,IACf,kBAAC,GAAD,QAGNK,SAASC,eAAe,SLsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5575a89f.chunk.js","sourcesContent":["export enum GroupType {\n    NEXT27 = 1,\n    NEXT = 2,\n    NEXTEEN = 3,\n    FAMILIA = 4,\n    PINK = 5,\n    MAXIMUS = 6,\n}\n\nexport const CEP_REGEX = /[0-9]{5}[\\d]{3}/g;","import {IGroup, IGroupLead, IGroupResponse} from \"./group.models\";\nimport {GroupType} from \"../../constants/constants\";\n\nasync function getGroupLeadList(): Promise<IGroupLead[]> {\n    const response: Response = await fetch('/data/lideres.json');\n    return await response.json();\n}\n\nasync function getLead(alias: string): Promise<IGroupLead | undefined> {\n    const leadList: IGroupLead[] = await getGroupLeadList();\n    return leadList.find((list: IGroupLead) => list.alias === alias);\n}\n\nasync function getGroupList(): Promise<IGroup[]> {\n    const response: Response = await fetch('./data/grupos.json');\n    const data: IGroupResponse[] = await response.json();\n    return buildGroupList(data);\n}\n\nfunction buildGroupList(list: IGroupResponse[]): IGroup[] {\n    return list.map(item => buildGroupItem(item));\n}\n\nfunction buildGroupItem(item: IGroupResponse): IGroup {\n    return ({\n        name: item.name,\n        groupName: GroupType[item.groupTypeId],\n        address: item.address\n    });\n}\n\nexport {\n    getLead,\n    getGroupLeadList,\n    getGroupList\n}\n","import {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport React, {useEffect, useState} from \"react\";\nimport {useParams, Link} from \"react-router-dom\"\nimport {IGroupLead} from \"../../shared/services/group/group.models\";\nimport {getLead} from \"../../shared/services/group/group.service\";\n\nfunction GroupLead() {\n    const [lead, setLead] = useState<IGroupLead>()\n    const { alias } = useParams();\n\n    useEffect(()=> {\n        alias && initGroupLeadList(alias);\n    }, [])\n\n    const initGroupLeadList = async (alias: string) => {\n        const lead: IGroupLead | undefined = await getLead(alias);\n        setLead(lead);\n    };\n\n    return <div>\n        { lead &&\n            <div>\n                <p>{lead.nome}</p>\n                <p>{lead.telefone}</p>\n            </div>\n        }\n        <Link to=\"/lideres\">Voltar</Link>\n    </div>\n}\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n        //clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n    // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupLead);","import React, {useEffect, useState} from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {getGroupLeadList} from \"../../shared/services/group/group.service\";\nimport {IGroupLead} from \"../../shared/services/group/group.models\";\nimport {Link} from \"react-router-dom\";\n\nfunction GroupLeadList() {\n    const [leadGroupList, setLeadGroupList] = useState<IGroupLead[] | undefined>(undefined);\n\n    useEffect(() => {\n        initGroupLeadList();\n    }, []);\n\n    const initGroupLeadList = async () => {\n        const list: IGroupLead[] = await getGroupLeadList();\n        setLeadGroupList(list)\n    };\n\n    return (\n        <div>\n            <h2>Líderes</h2>\n            <ul>\n                {\n                    leadGroupList && leadGroupList.map((list: IGroupLead, index: number) =>\n                        <li key={index}>\n                            <Link to={`lider/${list.alias}`}>{list.nome}</Link>\n                            <p>{list.telefone}</p>\n                        </li>\n                    )\n                }\n            </ul>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n        //clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n    // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupLeadList);","import React, {useEffect, useState} from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {IGroup} from \"../../shared/services/group/group.models\";\nimport {getGroupList} from \"../../shared/services/group/group.service\";\n\nfunction GroupList() {\n    const [groupList, setGroupList] = useState<IGroup[] | undefined>();\n\n    useEffect(() => {\n        initGroupList();\n    }, []);\n\n    const initGroupList = async () => {\n        const list: IGroup[] = await getGroupList();\n        setGroupList(list)\n    };\n\n    return (\n        <div>\n            <h2>Grupos de Crescimento</h2>\n            <ul>\n                {\n                    groupList && groupList.map((list: IGroup, index: number) =>\n                        <li key={index}>\n                            <p>{list.name}</p>\n                            <p>{list.address}</p>\n                        </li>\n                    )\n                }\n            </ul>\n        </div>\n\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n        //clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n    // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupList);\n","import {\n    IDistanceMatrix,\n    IDistanceMatrixResponse\n} from \"./google-maps-plataform.models\";\n\nfunction buildDistanceList(list: IDistanceMatrixResponse, destinations: string[]): IDistanceMatrix[] {\n    return list.destination_addresses\n        .map((address: string, index: number): IDistanceMatrix => {\n            const { distance, duration, fare, status } = list.rows[0].elements[index];\n\n            return {\n                fullAddress: address,\n                address: destinations[index],\n                distance,\n                duration,\n                fare,\n                status\n            }\n        })\n        .filter((address: IDistanceMatrix) =>\n            address.status === 'OK'\n            && address.distance\n            && address.duration\n        )\n}\n\nfunction orderDistanceListByDistance(list: IDistanceMatrix[]): IDistanceMatrix[] {\n    return list.sort((a: IDistanceMatrix, b: IDistanceMatrix) =>\n        a.distance.value - b.distance.value);\n}\n\nfunction orderDistanceListByDuration(list: IDistanceMatrix[]): IDistanceMatrix[] {\n    return list.sort((a: IDistanceMatrix, b: IDistanceMatrix) =>\n        a.duration.value - b.duration.value);\n}\n\nfunction orderDistanceListByFare(list: IDistanceMatrix[]): IDistanceMatrix[] {\n    return list.sort((a: IDistanceMatrix, b: IDistanceMatrix) =>\n        a.fare.value - b.fare.value);\n}\n\nexport {\n    buildDistanceList,\n    orderDistanceListByDistance,\n    orderDistanceListByDuration,\n    orderDistanceListByFare\n}","import {ITraficModeOptions, ITransitModeOptions} from \"./maps.models\";\n\nconst traficModes: ITraficModeOptions[] = [\n    {\n        label: 'Dirigindo',\n        mode: 'driving'\n    }, {\n        label: 'Andando',\n        mode: 'walking'\n    }, {\n        label: 'Pedalando',\n        mode: 'bicycling'\n    }, {\n        label: 'Transporte Público',\n        mode: 'transit'\n    }\n];\n\nconst transitModes: ITransitModeOptions[] = [\n    {\n        label: 'Ônibus',\n        mode: 'bus'\n    }, {\n        label: 'Metrô',\n        mode: 'subway'\n    }, {\n        label: 'Trem',\n        mode: 'train'\n    },\n];\n\nexport {\n    traficModes,\n    transitModes\n}\n","//https://console.developers.google.com/apis/dashboard?project=still-tensor-271919\nconst GOOGLE_MAPS_PLATAFORM_API_KEY = 'AIzaSyC2IdkXtXRKxKhQVBBw-XyKA_PazKAo1Js';\nconst PROXY_URL = 'https://cors-anywhere.herokuapp.com/';\n\nexport {\n    GOOGLE_MAPS_PLATAFORM_API_KEY,\n    PROXY_URL\n}","const serialize = (obj: any = {}) => {\n    const str = [];\n\n    for (const p in obj) {\n        if (obj.hasOwnProperty(p)) {\n            str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n        }\n    }\n\n    return str.join('&');\n};\n\n//\n// function paramsToObject(params): object {\n//     const urlParams = new URLSearchParams(params);\n//     // @ts-ignore\n//     const entries = urlParams.entries();\n//     const result = {};\n//     for (const entry of entries) { // each 'entry' is a [key, value] tupple\n//         const [key, value] = entry;\n//         result[key] = value;\n//     }\n//     return result;\n// }\n//\nfunction cleanEmptyPropetiesFromObjects(obj: any) {\n    return JSON.parse(JSON.stringify(obj));\n}\n//\n// function extractHtmlTags(html): string {\n//     const el: HTMLElement = document.createElement('div');\n//     el.innerHTML = html;\n//     return el.firstElementChild ? el.firstElementChild.textContent : '';\n// }\n//\n// function decodeEntities(str: string): string {\n//     const element = document.createElement('div');\n//\n//     if (str && typeof str === 'string') {\n//         str = str.replace(/<script[^>]*>([\\S\\s]*?)<\\/script>/gmi, '');\n//         str = str.replace(/<\\/?\\w(?:[^\"'>]|\"[^\"]*\"|'[^']*')*>/gmi, '');\n//         element.innerHTML = str;\n//         str = element.textContent;\n//         element.textContent = '';\n//     }\n//\n//     return str;\n// }\n//\n// function getMimeType(url: string): string {\n//     const regex = /[^.]+$/;\n//     const match = regex.exec(url);\n//     const ext = match && match.length > 0 && match[0];\n//\n//     switch (ext) {\n//         case 'webm':\n//             return 'video/webm';\n//         case 'mp4':\n//             return 'video/mp4';\n//         case 'jpg':\n//         case 'jpeg':\n//             return 'image/jpeg';\n//         case 'png':\n//             return 'image/png';\n//     }\n// }\n//\n// function getExtension(url: string): string {\n//     const regex = /[^.]+$/;\n//     const match = regex.exec(url);\n//     return match ? match.length > 0 && match[0] : undefined;\n// }\n\nexport {\n    serialize,\n    // paramsToObject,\n    cleanEmptyPropetiesFromObjects,\n    // extractHtmlTags,\n    // decodeEntities,\n    // getMimeType,\n    // getExtension\n}","import {\n    IDistanceMatrix,\n    IDistanceMatrixParametres,\n    IDistanceMatrixParametresRequest,\n    IDistanceMatrixResponse\n} from \"./google-maps-plataform.models\";\nimport {GOOGLE_MAPS_PLATAFORM_API_KEY, PROXY_URL} from \"./google-maps-plataform.constants\";\nimport {cleanEmptyPropetiesFromObjects, serialize} from \"../util/util.service\";\nimport {buildDistanceList} from \"./google-maps-plataform.service\";\nimport {IGroup} from \"../group/group.models\";\nimport {getGroupList} from \"../group/group.service\";\n\n//https://developers.google.com/maps/documentation/distance-matrix/intro?hl=pt-br\nasync function getDistanceMatrix(distanceParams: IDistanceMatrixParametres): Promise<IDistanceMatrix[]> {\n    const params:IDistanceMatrixParametres = cleanEmptyPropetiesFromObjects(distanceParams)\n    const address: string[] = await getDestinationAddress();\n    const destinations: string = buildUrlDestinationParams(address);\n    const origins: string = buildUrlOriginsParams(params);\n    const queryString: string = buildUrlQueryString(params, GOOGLE_MAPS_PLATAFORM_API_KEY);\n    const url: string = `${PROXY_URL}https://maps.googleapis.com/maps/api/distancematrix/json?${queryString}${origins}${destinations}`;\n    return await fetchDistanceMatrix(url, address);\n}\n\nasync function getDestinationAddress(): Promise<string[]> {\n    const groups: IGroup[] = await getGroupList();\n    return groups.map(group => group.address);\n}\n\nfunction buildUrlDestinationParams(address: string[]): string {\n    const destinationsQueryString = address.join('|').replace(/ /g, '+');\n    return `&destinations=${destinationsQueryString}`;\n}\n\nfunction buildUrlOriginsParams(params: IDistanceMatrixParametres): string {\n    const originsQueryString = params.origins.join('|').replace(/ /g, '+');\n    return `&origins=${originsQueryString}`;\n}\n\nfunction buildUrlQueryString(params: IDistanceMatrixParametres, key: string): string {\n    const requestParams: IDistanceMatrixParametresRequest = {\n        ...params,\n        key\n    };\n    return serialize(requestParams);\n}\n\nasync function fetchDistanceMatrix(url: string, destinations: string[]): Promise<IDistanceMatrix[]> {\n    const response: Response = await fetch(url);\n    const data: IDistanceMatrixResponse = await response.json();\n    return buildDistanceList(data, destinations);\n}\n\nexport {\n    getDistanceMatrix\n}\n","import {IAddress} from \"./viacep.models\";\n\nasync function getAddessByCep(cep: string): Promise<IAddress> {\n    const url: string = `https://viacep.com.br/ws/${cep}/json/`;\n    const response: Response = await fetch(url);\n    return await response.json();\n}\n\nexport {\n    getAddessByCep\n}","import React, {useEffect, useRef, useState} from \"react\";\nimport {\n    orderDistanceListByDistance,\n    orderDistanceListByDuration,\n    orderDistanceListByFare\n} from '../../services/google-maps-plataform/google-maps-plataform.service';\nimport {ITraficModeOptions, ITransitModeOptions} from \"./maps.models\";\nimport {traficModes, transitModes} from \"./maps.service\";\nimport {\n    IDistanceMatrix,\n    IDistanceMatrixParametres, ITraficMode,\n    ITransitMode\n} from \"../../services/google-maps-plataform/google-maps-plataform.models\";\nimport {CEP_REGEX} from \"../../constants/constants\";\nimport {getDistanceMatrix} from \"../../services/google-maps-plataform/google-maps-plataform.api\";\nimport {getAddessByCep} from \"../../services/viacep/viacep.api\";\nimport {IAddress} from \"../../services/viacep/viacep.models\";\n\nfunction Maps() {\n    const traficModeSelect = useRef(null);\n    const transitModeSelect = useRef(null);\n    const originCepInput = useRef(null);\n\n    const [originCep, setOriginCep] = useState<string>('');\n    const [address, setAddress] = useState<IAddress | undefined>();\n    const [traficMode, setTraficMode] = useState<ITraficMode>();\n    const [transitMode, setTransitMode] = useState<ITransitMode>();\n    const [sortBy, setSortBy] = useState<'nearest' | 'faster' | 'cheap' | undefined>();\n    const [distance, setDistance] = useState<IDistanceMatrix[] | undefined>();\n    const [loading, setLoading] = useState<boolean>(false)\n\n    const getDistance = async () => {\n        setDistance(undefined);\n        setLoading(true);\n\n        const params: IDistanceMatrixParametres = {\n            origins: [originCep],\n            mode: traficMode,\n            transit_mode: transitMode\n        };\n\n        const addressList: IDistanceMatrix[] = await getDistanceMatrix(params);\n\n        switch (sortBy) {\n            case 'faster':\n                setDistance(orderDistanceListByDuration(addressList));\n                break;\n            case 'nearest':\n                setDistance(orderDistanceListByDistance(addressList));\n                break;\n            case 'cheap':\n                setDistance(orderDistanceListByFare(addressList));\n                break;\n            default:\n                setDistance(orderDistanceListByDistance(addressList));\n        }\n\n        setLoading(false);\n    };\n\n    const getAddress = async (cep: string) => {\n        const address = cep ? await getAddessByCep(cep) : undefined;\n        await setAddress(address)\n    };\n\n    const handleOriginCep = () => {\n        // @ts-ignore-next-line\n        const value = originCepInput.current.value;\n        const match = CEP_REGEX.exec(value);\n        match && setOriginCep(match[0]);\n    };\n\n    const handleTraficMode = () => {\n        // @ts-ignore-next-line\n        setTraficMode(traficModeSelect.current.value);\n    };\n\n    const handelTransitMode = () => {\n        // @ts-ignore-next-line\n        setTransitMode(transitModeSelect.current.value);\n    };\n\n    useEffect(() => {\n        handleTraficMode();\n        getAddress(originCep);\n    }, [originCep]);\n\n    useEffect(() => {\n        if(traficMode === 'transit') {\n            handelTransitMode();\n        } else {\n            setTransitMode(undefined)\n        }\n    }, [traficMode]);\n\n    useEffect(() => {\n        originCep && sortBy && getDistance();\n    }, [sortBy, originCep, traficMode, transitMode]);\n\n    return <div>\n        <h2>Maps</h2>\n\n        <label>\n            Meu CEP:\n            <input type=\"text\"\n                   ref={originCepInput}\n                   onKeyUp={handleOriginCep}\n                   disabled={loading}\n            />\n        </label>\n\n        {\n            address &&\n                <div>\n                    <p>{address.cep}</p>\n                    <p>{address.logradouro}</p>\n                    <p>{address.complemento}</p>\n                    <p>{address.bairro}</p>\n                    <p>{address.localidade}</p>\n                    <p>{address.uf}</p>\n                </div>\n        }\n\n        <br/>\n\n        <label>\n            Pretendo ir:\n            <select name=\"\" id=\"\"\n                    ref={traficModeSelect}\n                    onChange={handleTraficMode}\n                    disabled={loading}\n            >\n                {\n                    traficModes.map((mode: ITraficModeOptions, index: number) =>\n                        <option\n                            key={index}\n                            value={mode.mode}\n                        >{mode.label}</option>\n                    )\n                }\n            </select>\n        </label>\n\n        <br/>\n\n        {\n            traficMode === 'transit' && <label>\n                Meio de transporte preferencial:\n                <select name=\"\" id=\"\"\n                        ref={transitModeSelect}\n                        onChange={handelTransitMode}\n                        disabled={loading}\n                >\n                    {\n                        transitModes.map((mode: ITransitModeOptions, index: number) =>\n                            <option\n                                key={index}\n                                value={mode.mode}\n                            >{mode.label}</option>\n                        )\n                    }\n                </select>\n            </label>\n        }\n\n        <br/>\n\n        <button\n            onClick={() => setSortBy('nearest')}\n            disabled={!originCep || loading}\n        >Encontre o mais próximo próximo</button>\n\n        <br/>\n\n        <button\n            onClick={() => setSortBy('faster')}\n            disabled={!originCep || loading}\n        >Encontre o mais rápido para chegar</button>\n\n        <br/>\n\n        {\n            transitMode &&\n            <button\n                onClick={() => setSortBy('cheap')}\n                disabled={!originCep || loading}\n            >O mais barato</button>\n        }\n\n        <ul>\n            {\n                distance && distance.map((item: IDistanceMatrix, index: number) =>\n                    <li key={index}>\n                        <p>{ item.address }</p>\n                        <p>{ item.distance.text }</p>\n                        <p>{ item.duration.text }</p>\n                        <p>{ item.fare?.text}</p>\n                    </li>\n                )\n            }\n        </ul>\n    </div>\n}\n\nexport default Maps;","import React from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport Maps from \"../../shared/components/maps/Maps\";\n\nfunction MyGroup() {\n    return (\n        <div>\n            <h2>Meu Grupo</h2>\n            <Maps/>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n        //clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n    // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyGroup);","import React from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\n\nfunction Home() {\n    return (\n        <div>\n            <h2>Grupo de Crescimento</h2>\n            <p>Seja bem vindo. Conheça o seu Grupo de Conhecimento personalizado pra você.</p>\n            <Link to=\"/meugrupo\">Quero conhecer agora</Link>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n        //clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n    // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import {Route, Switch} from \"react-router-dom\";\nimport Lider from \"../../../containers/group-lead/GroupLead\"\nimport Lideres from \"../../../containers/group-lead-list/GroupLeadList\";\nimport ListaGrupos from \"../../../containers/group-list/GroupList\";\nimport MyGroup from \"../../../containers/my-group/MyGroup\";\nimport Home from \"../../../containers/home/Home\";\nimport React from \"react\";\n\nfunction SwitchRoute() {\n    return (\n        <Switch>\n            {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n            <Route path=\"/lider/:alias\">\n                <Lider />\n            </Route>\n            <Route path=\"/lideres\">\n                <Lideres />\n            </Route>\n            <Route path=\"/grupos\">\n                <ListaGrupos />\n            </Route>\n            <Route path=\"/meugrupo\">\n                <MyGroup />\n            </Route>\n            <Route path=\"/\">\n                <Home />\n            </Route>\n        </Switch>\n    )\n}\n\nexport default SwitchRoute;","import {Link} from \"react-router-dom\";\nimport React from \"react\";\n\nfunction Navigation() {\n    return (\n        <nav>\n            <ul>\n                <li>\n                    <Link to=\"/\">Home</Link>\n                </li>\n                <li>\n                    <Link to=\"/lideres\">Líderes</Link>\n                </li>\n                <li>\n                    <Link to=\"/grupos\">Grupos de Crescimento</Link>\n                </li>\n                <li>\n                    <Link to=\"/meugrupo\">Conhecer meu Grupo</Link>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navigation;","import React from 'react';\nimport styled from 'styled-components';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport SwitchRoute from \"./shared/components/switch_route/SwitchRoute\";\nimport Navigation from \"./shared/components/navigation/Navigation\";\n\nfunction App() {\n  return (\n      <Router>\n        <div>\n          <Title>Hub GC</Title>\n          <Navigation/>\n          <SwitchRoute />\n        </div>\n      </Router>\n  );\n}\n\nconst Title = styled.div`\n    font-size: 20px\n`;\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n      // clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n  // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const CLICK_UPDATE_VALUE = 'CLICK_UPDATE_VALUE';","import { CLICK_UPDATE_VALUE } from '../actions/actionTypes';\nconst initialState = {\n    newValue: 'Atualizado via Redux!'\n};\nfunction clickReducer(state = initialState, action: { type: any; newValue: any; }) {\n    switch (action.type) {\n        case CLICK_UPDATE_VALUE:\n            return {\n                ...state,\n                newValue: action.newValue\n            };\n        default:\n            return state;\n    }\n}\n\nexport {\n    clickReducer\n}","import { clickReducer } from './clickReducer';\n//import { OtherReducer } from './otherReducer';\nimport { combineReducers } from 'redux';\nexport const Reducers = combineReducers({\n    clickState: clickReducer,\n    //otherState: otherReducer\n});","import { createStore } from 'redux';\nimport { Reducers } from '../reducers';\nexport const Store = createStore(Reducers);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { Store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={Store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}