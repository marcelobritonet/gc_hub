{"version":3,"sources":["containers/group-lead/group-lead.service.tsx","containers/group-lead/GroupLead.tsx","containers/group-list/group-list.service.tsx","containers/group-list/GroupList.tsx","shared/services/util/util.service.tsx","shared/services/google-maps-plataform/google-maps-plataform.service.tsx","shared/components/maps/maps.service.tsx","shared/components/maps/Maps.tsx","containers/my-group/MyGroup.tsx","containers/home/Home.tsx","shared/components/switch_route/SwitchRoute.tsx","shared/components/navigation/Navigation.tsx","App.tsx","serviceWorker.js","actions/actionTypes.tsx","reducers/clickReducer.tsx","reducers/index.tsx","store/index.tsx","index.js"],"names":["getGroupLeadList","a","fetch","response","json","data","connect","store","dispatch","bindActionCreators","useState","undefined","leadGroupList","setLeadGroupList","useEffect","initGroupLeadList","list","map","index","key","nome","telefone","getGroupList","groupList","setGroupList","initGroupList","endereco","serialize","obj","str","p","hasOwnProperty","push","encodeURIComponent","join","getDistanceMatrix","params","groups","address","group","destinations","replace","origins","requestParams","queryString","url","traficModes","label","mode","transitModes","Maps","traficModeSelect","useRef","transitModeSelect","originCepInput","originCep","setOriginCep","traficMode","setTraficMode","transitMode","setTransitMode","handleTraficMode","handelTransitMode","getDistance","transit_mode","console","log","current","value","type","ref","onBlur","name","id","onChange","onClick","to","SwitchRoute","path","Navigation","Title","styled","div","Boolean","window","location","hostname","match","initialState","newValue","Reducers","combineReducers","clickState","state","action","Store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.84a95818.chunk.js","sourcesContent":["import {IGroupLead} from \"./group-lead.models\";\n\nconst getGroupLeadList = async () => {\n    const response: Response = await fetch('./data/lideres.json');\n    const data: IGroupLead[] = await response.json();\n    return data;\n};\n\nexport {\n    getGroupLeadList\n}","import React, {useEffect, useState} from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {getGroupLeadList} from \"./group-lead.service\";\nimport {IGroupLead} from \"./group-lead.models\";\n\nfunction GroupLead() {\n    const [leadGroupList, setLeadGroupList] = useState<IGroupLead[] | undefined>(undefined);\n\n    useEffect(() => {\n        initGroupLeadList();\n    }, []);\n\n    const initGroupLeadList = async () => {\n        const list: IGroupLead[] = await getGroupLeadList();\n        setLeadGroupList(list)\n    };\n\n    return (\n        <div>\n            <h2>LÃ­deres</h2>\n            <ul>\n                {\n                    leadGroupList && leadGroupList.map((list: IGroupLead, index: number) =>\n                        <li key={index}>\n                            <p>{list.nome}</p>\n                            <p>{list.telefone}</p>\n                        </li>\n                    )\n                }\n            </ul>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n        //clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n    // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupLead);","import {IGroup} from \"./group-list.models\";\n\nconst getGroupList = async () => {\n    const response: Response = await fetch('./data/grupos.json');\n    const data: IGroup[] = await response.json();\n    return data;\n};\n\nexport {\n    getGroupList\n}","import React, {useEffect, useState} from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {IGroup} from \"./group-list.models\";\nimport {getGroupList} from \"./group-list.service\";\n\nfunction GroupList() {\n    const [groupList, setGroupList] = useState<IGroup[] | undefined>(undefined);\n\n    useEffect(() => {\n        initGroupList();\n    }, []);\n\n    const initGroupList = async () => {\n        const list: IGroup[] = await getGroupList();\n        setGroupList(list)\n    };\n\n    return (\n        <div>\n            <h2>Grupos de Crescimento</h2>\n            <ul>\n                {\n                    groupList && groupList.map((list: IGroup, index: number) =>\n                        <li key={index}>\n                            <p>{list.nome}</p>\n                            <p>{list.endereco}</p>\n                        </li>\n                    )\n                }\n            </ul>\n        </div>\n\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n        //clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n    // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupList);","const serialize = (obj: any = {}) => {\n    const str = [];\n\n    for (const p in obj) {\n        if (obj.hasOwnProperty(p)) {\n            str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n        }\n    }\n\n    return str.join('&');\n};\n\n//\n// function paramsToObject(params): object {\n//     const urlParams = new URLSearchParams(params);\n//     // @ts-ignore\n//     const entries = urlParams.entries();\n//     const result = {};\n//     for (const entry of entries) { // each 'entry' is a [key, value] tupple\n//         const [key, value] = entry;\n//         result[key] = value;\n//     }\n//     return result;\n// }\n//\n// function cleanEmptyPropetiesFromObjects(obj) {\n//     return JSON.parse(JSON.stringify(obj));\n// }\n//\n// function extractHtmlTags(html): string {\n//     const el: HTMLElement = document.createElement('div');\n//     el.innerHTML = html;\n//     return el.firstElementChild ? el.firstElementChild.textContent : '';\n// }\n//\n// function decodeEntities(str: string): string {\n//     const element = document.createElement('div');\n//\n//     if (str && typeof str === 'string') {\n//         str = str.replace(/<script[^>]*>([\\S\\s]*?)<\\/script>/gmi, '');\n//         str = str.replace(/<\\/?\\w(?:[^\"'>]|\"[^\"]*\"|'[^']*')*>/gmi, '');\n//         element.innerHTML = str;\n//         str = element.textContent;\n//         element.textContent = '';\n//     }\n//\n//     return str;\n// }\n//\n// function getMimeType(url: string): string {\n//     const regex = /[^.]+$/;\n//     const match = regex.exec(url);\n//     const ext = match && match.length > 0 && match[0];\n//\n//     switch (ext) {\n//         case 'webm':\n//             return 'video/webm';\n//         case 'mp4':\n//             return 'video/mp4';\n//         case 'jpg':\n//         case 'jpeg':\n//             return 'image/jpeg';\n//         case 'png':\n//             return 'image/png';\n//     }\n// }\n//\n// function getExtension(url: string): string {\n//     const regex = /[^.]+$/;\n//     const match = regex.exec(url);\n//     return match ? match.length > 0 && match[0] : undefined;\n// }\n\nexport {\n    serialize,\n    // paramsToObject,\n    // cleanEmptyPropetiesFromObjects,\n    // extractHtmlTags,\n    // decodeEntities,\n    // getMimeType,\n    // getExtension\n}","import {serialize} from \"../util/util.service\";\nimport {\n    IDistanceMatrixParametres,\n    IDistanceMatrixParametresRequest,\n    IDistanceMatrixResponse\n} from \"./google-maps-plataform.models\";\nimport {getGroupList} from \"../../../containers/group-list/group-list.service\";\nimport {IGroup} from \"../../../containers/group-list/group-list.models\";\n\nconst GOOGLE_MAPS_PLATAFORM_API_KEY = 'AIzaSyC2IdkXtXRKxKhQVBBw-XyKA_PazKAo1Js';\nconst PROXY_URL = 'https://cors-anywhere.herokuapp.com/';\n\nconst getDistanceMatrix = async (params: IDistanceMatrixParametres) => {\n    const groups: IGroup[] = await getGroupList();\n    const address: string[] = groups.map(group => group.endereco);\n    const destinations: string = `&destinations=${address.join('|').replace(/ /g, '+')}`;\n    const origins: string = `&origins=${params.origins.join('|').replace(/ /g, '+')}`;\n    const requestParams: IDistanceMatrixParametresRequest = {\n        ...params,\n        key: GOOGLE_MAPS_PLATAFORM_API_KEY\n    };\n    const queryString: string = serialize(requestParams);\n    const url: string = `${PROXY_URL}https://maps.googleapis.com/maps/api/distancematrix/json?${queryString}${origins}${destinations}`;\n    const response: Response = await fetch(url);\n    const data: IDistanceMatrixResponse = await response.json();\n    return data;\n};\n\nexport {\n    GOOGLE_MAPS_PLATAFORM_API_KEY,\n    getDistanceMatrix\n}","import {ITraficModeOptions, ITransitModeOptions} from \"./maps.models\";\n\nconst traficModes: ITraficModeOptions[] = [\n    {\n        label: 'Dirigindo',\n        mode: 'driving'\n    }, {\n        label: 'Andando',\n        mode: 'walking'\n    }, {\n        label: 'Pedalando',\n        mode: 'bicycling'\n    }, {\n        label: 'Transporte PÃºblico',\n        mode: 'transit'\n    }\n];\n\nconst transitModes: ITransitModeOptions[] = [\n    {\n        label: 'Ãnibus',\n        mode: 'bus'\n    }, {\n        label: 'MetrÃ´',\n        mode: 'subway'\n    }, {\n        label: 'Trem',\n        mode: 'train'\n    },\n];\n\nexport {\n    traficModes,\n    transitModes\n}","import React, {useEffect, useRef, useState} from \"react\";\nimport {getDistanceMatrix} from '../../services/google-maps-plataform/google-maps-plataform.service';\nimport {ITraficModeOptions, ITransitModeOptions} from \"./maps.models\";\nimport {traficModes, transitModes} from \"./maps.service\";\nimport {\n    IDistanceMatrixParametres, ITraficMode,\n    ITransitMode\n} from \"../../services/google-maps-plataform/google-maps-plataform.models\";\n\nfunction Maps() {\n    const traficModeSelect = useRef(null);\n    const transitModeSelect = useRef(null);\n    const originCepInput = useRef(null);\n\n    const [originCep, setOriginCep] = useState<string>('22775170');\n    const [traficMode, setTraficMode] = useState<ITraficMode>();\n    const [transitMode, setTransitMode] = useState<ITransitMode>();\n\n    useEffect(() => {\n        handleTraficMode();\n    }, [originCep]);\n\n    useEffect(() => {\n        if(traficMode === 'transit') {\n            handelTransitMode();\n        } else {\n            setTransitMode(undefined)\n        }\n    }, [traficMode]);\n\n    const getDistance = async () => {const params: IDistanceMatrixParametres = {\n            origins: originCep ? [originCep] : [],\n            mode: traficMode,\n            transit_mode: transitMode\n        };\n        const data = originCep && await getDistanceMatrix(params);\n        await console.log(data);\n    };\n\n    const handleOriginCep = () => {\n        // @ts-ignore-next-line\n        setOriginCep(originCepInput.current.value);\n    };\n\n    const handleTraficMode = () => {\n        // @ts-ignore-next-line\n        setTraficMode(traficModeSelect.current.value);\n    };\n\n    const handelTransitMode = () => {\n        // @ts-ignore-next-line\n        setTransitMode(transitModeSelect.current.value);\n    };\n\n    return <div>\n        <h2>Maps</h2>\n\n        <label>\n            Meu CEP:\n            <input type=\"text\"\n                   ref={originCepInput}\n                   onBlur={handleOriginCep}\n            />\n        </label>\n\n        <br/>\n\n        <label>\n            Pretendo ir:\n            <select name=\"\" id=\"\"\n                    ref={traficModeSelect}\n                    onChange={handleTraficMode}\n            >\n                {\n                    traficModes.map((mode: ITraficModeOptions, index: number) =>\n                        <option\n                            onChange={() => handleTraficMode()}\n                            key={index}\n                            value={mode.mode}\n                        >{mode.label}</option>\n                    )\n                }\n            </select>\n        </label>\n\n        <br/>\n\n        {\n            traficMode === 'transit' && <label>\n                Meio de transporte preferencial:\n                <select name=\"\" id=\"\"\n                        ref={transitModeSelect}\n                        onChange={handelTransitMode}\n                >\n                    {\n                        transitModes.map((mode: ITransitModeOptions, index: number) =>\n                            <option\n                                key={index}\n                                value={mode.mode}\n                            >{mode.label}</option>\n                        )\n                    }\n                </select>\n            </label>\n        }\n\n        <br/>\n\n        <button onClick={getDistance}>Get</button>\n    </div>\n}\n\nexport default Maps;","import React from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport Maps from \"../../shared/components/maps/Maps\";\n\nfunction MyGroup() {\n    return (\n        <div>\n            <h2>Meu Grupo</h2>\n            <Maps/>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n        //clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n    // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyGroup);","import React from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\n\nfunction Home() {\n    return (\n        <div>\n            <h1>TÃ­tulo</h1>\n            <Link to=\"/meugrupo\">Conhecer meu GC</Link>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n        //clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n    // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import {Route, Switch} from \"react-router-dom\";\nimport Lideres from \"../../../containers/group-lead/GroupLead\";\nimport ListaGrupos from \"../../../containers/group-list/GroupList\";\nimport MyGroup from \"../../../containers/my-group/MyGroup\";\nimport Home from \"../../../containers/home/Home\";\nimport React from \"react\";\n\nfunction SwitchRoute() {\n    return (\n        <Switch>\n            {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n            <Route path=\"/lideres\">\n                <Lideres />\n            </Route>\n            <Route path=\"/grupos\">\n                <ListaGrupos />\n            </Route>\n            <Route path=\"/meugrupo\">\n                <MyGroup />\n            </Route>\n            <Route path=\"/\">\n                <Home />\n            </Route>\n        </Switch>\n    )\n}\n\nexport default SwitchRoute;","import {Link} from \"react-router-dom\";\nimport React from \"react\";\n\nfunction Navigation() {\n    return (\n        <nav>\n            <ul>\n                <li>\n                    <Link to=\"/\">Home</Link>\n                </li>\n                <li>\n                    <Link to=\"/lideres\">LÃ­deres</Link>\n                </li>\n                <li>\n                    <Link to=\"/grupos\">Grupos de Crescimento</Link>\n                </li>\n                <li>\n                    <Link to=\"/meugrupo\">Meu Grupo</Link>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navigation;","import React from 'react';\nimport styled from 'styled-components';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport SwitchRoute from \"./shared/components/switch_route/SwitchRoute\";\nimport Navigation from \"./shared/components/navigation/Navigation\";\n\nfunction App() {\n  return (\n      <Router>\n        <div>\n          <Title>Hub GC</Title>\n          <Navigation/>\n          <SwitchRoute />\n        </div>\n      </Router>\n  );\n}\n\nconst Title = styled.div`\n    font-size: 20px\n`;\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n      // clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n  // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","export const CLICK_UPDATE_VALUE = 'CLICK_UPDATE_VALUE';","import { CLICK_UPDATE_VALUE } from '../actions/actionTypes';\nconst initialState = {\n    newValue: 'Atualizado via Redux!'\n};\nexport const clickReducer = (state = initialState, action: { type: any; newValue: any; }) => {\n    switch (action.type) {\n        case CLICK_UPDATE_VALUE:\n            return {\n                ...state,\n                newValue: action.newValue\n            };\n        default:\n            return state;\n    }\n};","import { clickReducer } from './clickReducer';\n//import { OtherReducer } from './otherReducer';\nimport { combineReducers } from 'redux';\nexport const Reducers = combineReducers({\n    clickState: clickReducer,\n    //otherState: otherReducer\n});","import { createStore } from 'redux';\nimport { Reducers } from '../reducers';\nexport const Store = createStore(Reducers);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { Store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={Store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}