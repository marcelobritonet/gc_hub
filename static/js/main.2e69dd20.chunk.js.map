{"version":3,"sources":["shared/constants/constants.ts","shared/services/session-storage/session-storage.service.ts","shared/services/group/group.service.ts","containers/group-lead/GroupLead.tsx","containers/group-lead-list/GroupLeadList.tsx","containers/group-list/GroupList.tsx","shared/components/find-destination/destination-list/DestinationList.tsx","shared/components/find-destination/find-destination.service.ts","shared/services/google-maps-plataform/google-maps-plataform.constants.ts","shared/services/util/util.service.ts","shared/services/google-maps-plataform/google-maps-plataform.service.ts","shared/services/google-maps-plataform/google-maps-plataform.api.ts","shared/services/viacep/viacep.api.ts","shared/components/find-destination/find-destination-form/FindDestinationForm.tsx","shared/components/find-destination/FindDestination.tsx","containers/my-group/MyGroup.tsx","containers/home/Home.tsx","shared/components/switch-route/SwitchRoute.tsx","shared/components/navigation/Navigation.tsx","App.tsx","serviceWorker.js","reducers/clickReducer.ts","reducers/index.ts","actions/actionTypes.ts","store/index.ts","index.js"],"names":["GroupType","CEP_REGEX","set","key","data","sessionStorage","setItem","JSON","stringify","get","item","getItem","parse","undefined","getGroupLeadList","a","LEAD_LOCAL_STORAGE_KEY","storaged","SessionStorage","fetch","response","json","getLead","alias","leadList","find","list","getGroupList","GROUP_LIST_STORAGE_KEY","leads","buildGroupList","map","allGroupLeads","name","groupName","groupTypeId","address","groupLeads","reduce","accumulator","currentValue","lead","_groupLead","reunion","complement","buildGroupItem","connect","store","dispatch","bindActionCreators","useState","setLead","useParams","useEffect","initGroupLeadList","nome","phone","Title","styled","h2","leadGroupList","setLeadGroupList","index","to","Wrapper","div","PageTitle","List","ul","Group","li","h3","Address","p","Leads","Lead","Reunion","span","groupList","setGroupList","initGroupList","DestinationList","prop","distance","text","duration","fare","traficModes","label","mode","transitModes","PROXY_URL","cleanEmptyPropetiesFromObjects","obj","buildDistanceList","destinations","destination_addresses","rows","elements","status","fullAddress","filter","orderDistanceListByDistance","sort","b","value","orderDistanceListByFare","getDistanceMatrix","distanceParams","params","getDestinationAddress","buildUrlDestinationParams","origins","buildUrlOriginsParams","queryString","buildUrlQueryString","url","fetchDistanceMatrix","groups","group","destinationsQueryString","join","replace","originsQueryString","str","hasOwnProperty","push","encodeURIComponent","serialize","getAddessByCep","cep","FindDestinationForm","setDistance","traficModeSelect","useRef","transitModeSelect","originCepInput","originCep","setOriginCep","setAddress","traficMode","setTraficMode","transitMode","setTransitMode","sortBy","setSortBy","loading","setLoading","getDistance","transit_mode","addressList","getAddress","handleTraficMode","current","handelTransitMode","type","ref","onKeyUp","match","exec","disabled","logradouro","complemento","bairro","localidade","uf","id","onChange","onClick","FindDestination","SwitchRoute","path","Navigation","h1","Boolean","window","location","hostname","initialState","newValue","Reducers","combineReducers","clickState","state","action","Store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.2e69dd20.chunk.js","sourcesContent":["export enum GroupType {\n    NEXT27 = 1,\n    NEXT = 2,\n    NEXTEEN = 3,\n    FAMILIA = 4,\n    PINK = 5,\n    MAXIMUS = 6,\n}\n\nexport const CEP_REGEX = /[0-9]{5}[\\d]{3}/g;","function set(key: string, data: any) {\n    sessionStorage.setItem(key, JSON.stringify(data));\n}\n\nfunction get(key: string): any {\n    const item = sessionStorage.getItem(key);\n    return item ? JSON.parse(item): undefined;\n}\n\nexport default {\n    set,\n    get\n}","import {IGroup, IGroupLead, IGroupResponse} from \"./group.models\";\nimport {GroupType} from \"../../constants/constants\";\nimport SessionStorage from '../session-storage/session-storage.service'\n\nasync function getGroupLeadList(): Promise<IGroupLead[]> {\n    const LEAD_LOCAL_STORAGE_KEY = 'lead_list'\n    const storaged = SessionStorage.get(LEAD_LOCAL_STORAGE_KEY);\n    if (storaged) {\n        return await storaged;\n    } else {\n        const response: Response = await fetch('/data/lideres.json');\n        const data = await response.json();\n        SessionStorage.set(LEAD_LOCAL_STORAGE_KEY, data);\n        return data;\n    }\n}\n\nasync function getLead(alias: string): Promise<IGroupLead | undefined> {\n    const leadList: IGroupLead[] = await getGroupLeadList();\n    return leadList.find((list: IGroupLead) => list.alias === alias);\n}\n\nasync function getGroupList(): Promise<IGroup[]> {\n    const GROUP_LIST_STORAGE_KEY = 'group_list';\n    const storaged = SessionStorage.get(GROUP_LIST_STORAGE_KEY);\n    if(storaged) {\n        return await storaged;\n    } else {\n        const response: Response = await fetch('./data/grupos.json');\n        const data: IGroupResponse[] = await response.json();\n        const leads: IGroupLead[] = await getGroupLeadList();\n        const list: IGroup[] = buildGroupList(data, leads);\n        SessionStorage.set(GROUP_LIST_STORAGE_KEY, list);\n        return list;\n    }\n}\n\nfunction buildGroupList(list: IGroupResponse[], leads: IGroupLead[]): IGroup[] {\n    return list.map(item => buildGroupItem(item, leads));\n}\n\nfunction buildGroupItem(item: IGroupResponse, allGroupLeads: IGroupLead[]): IGroup {\n    // TODO: BUILDAR REUNION\n    // TODO: POSSIBIILIDADE DE TER MAIS DE UM ENCONTRO POR GRUPO\n    const reducer = (accumulator: IGroupLead[], currentValue: string): IGroupLead[] => {\n        const lead: IGroupLead | undefined = allGroupLeads.find((_groupLead: IGroupLead) =>\n            _groupLead.alias === currentValue\n        )\n\n        return lead\n            ? [...accumulator, lead]\n            : accumulator\n    }\n\n    return {\n        name: item.name,\n        groupName: GroupType[item.groupTypeId],\n        address: item.address,\n        groupLeads: item.groupLeads.reduce(reducer, []),\n        reunion: 'sexta 20h30',\n        complement: item.complement\n    };\n}\n\nexport {\n    getLead,\n    getGroupLeadList,\n    getGroupList\n}\n","import {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport React, {useEffect, useState} from \"react\";\nimport {useParams, Link} from \"react-router-dom\"\nimport {IGroupLead} from \"../../shared/services/group/group.models\";\nimport {getLead} from \"../../shared/services/group/group.service\";\n\nfunction GroupLead() {\n    const [lead, setLead] = useState<IGroupLead>()\n    const { alias } = useParams();\n\n    useEffect(()=> {\n        alias && initGroupLeadList(alias);\n    }, [])\n\n    const initGroupLeadList = async (alias: string) => {\n        const lead: IGroupLead | undefined = await getLead(alias);\n        setLead(lead);\n    };\n\n    return <div>\n        { lead &&\n            <ul>\n                <li>\n                    <p>{lead.nome} - {lead.phone}</p>\n                </li>\n            </ul>\n        }\n    </div>\n}\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n        //clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n    // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupLead);","import React, {useEffect, useState} from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {getGroupLeadList} from \"../../shared/services/group/group.service\";\nimport {IGroupLead} from \"../../shared/services/group/group.models\";\nimport {Link} from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nfunction GroupLeadList() {\n    // TODO: LISTAR OS GCS DE CADA LIDER\n    const [leadGroupList, setLeadGroupList] = useState<IGroupLead[] | undefined>(undefined);\n\n    useEffect(() => {\n        initGroupLeadList();\n    }, []);\n\n    const initGroupLeadList = async () => {\n        const list: IGroupLead[] = await getGroupLeadList();\n        setLeadGroupList(list)\n    };\n\n    return (\n        <div>\n            <Title>Líderes</Title>\n            <ul>\n                {\n                    leadGroupList && leadGroupList.map((list: IGroupLead, index: number) =>\n                        <li key={index}>\n                            <p><Link to={`lider/${list.alias}`}>{list.nome}</Link> - {list.phone}</p>\n                        </li>\n                    )\n                }\n            </ul>\n        </div>\n    )\n}\n\nconst Title = styled.h2`\n`;\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n        //clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n    // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupLeadList);","import React, {useEffect, useState} from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {IGroup, IGroupLead} from \"../../shared/services/group/group.models\";\nimport {getGroupList} from \"../../shared/services/group/group.service\";\nimport styled from \"styled-components\";\nimport {Link} from \"react-router-dom\";\n\nfunction GroupList() {\n    // TODO: LISTAR OS LIDERES DE CADA GC\n    // TODO: MONTAR A DATA DO ENCONTRO\n    // TODO: ORDENAR POR DATA DE ENCONTRO\n    // TODO: ORDENAR POR \"PROXIMO ENCONTRO\"\n    // TODO: FILTRAR POR \"groupName\"\n    const [groupList, setGroupList] = useState<IGroup[] | undefined>();\n\n    useEffect(() => {\n        initGroupList();\n    }, []);\n\n    const initGroupList = async () => {\n        const list: IGroup[] = await getGroupList();\n        setGroupList(list)\n    };\n\n    return (\n        <Wrapper>\n            <PageTitle>Grupos de Crescimento</PageTitle>\n            <List>\n                {\n                    groupList && groupList.map((list: IGroup, index: number) =>\n                        <Group key={index}>\n                            <Title>{list.name} | {list.groupName}</Title>\n                            <Reunion>{ list.reunion }</Reunion>\n                            <Address>{list.address} <br/>{ list.complement }</Address>\n                            <Leads>\n                                { list.groupLeads.map((lead: IGroupLead, index: number) =>\n                                    <Lead key={index}>\n                                        <Link to={`lider/${lead.alias}`}>{lead.nome}</Link> - {lead.phone}\n                                    </Lead>\n                                )}\n                            </Leads>\n\n                        </Group>\n                    )\n                }\n            </List>`\n        </Wrapper>\n\n    )\n}\n\nconst Wrapper = styled.div``;\n\nconst PageTitle = styled.h2``;\n\nconst List = styled.ul``;\n\nconst Group = styled.li``;\n\nconst Title = styled.h3``;\n\nconst Address = styled.p``;\n\nconst Leads = styled.ul``;\n\nconst Lead = styled.li``;\n\nconst Reunion = styled.span``;\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n        //clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n    // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GroupList);\n","import React from \"react\";\nimport {IDistanceMatrix} from \"../../../services/google-maps-plataform/google-maps-plataform.models\";\n\ninterface IDestinationList {\n    distance: IDistanceMatrix[] | undefined;\n}\n\nfunction DestinationList(prop: IDestinationList) {\n    const { distance } = prop;\n\n    return (\n        <ul>\n            {\n                distance\n                    ? distance.map((item: IDistanceMatrix, index: number) =>\n                        <li key={index}>\n                            <p>{ item.address }</p>\n                            <p>{ item.distance.text } - { item.duration.text }</p>\n                            <p>{ item.fare?.text}</p>\n                        </li>\n                    )\n                    : <li>Nenhum Resultado</li>\n            }\n        </ul>\n    )\n}\n\nexport default DestinationList;","import {ITraficModeOptions, ITransitModeOptions} from \"./find-destination.models\";\n\nconst traficModes: ITraficModeOptions[] = [\n    {\n        label: 'Dirigindo',\n        mode: 'driving'\n    }, {\n        label: 'Andando',\n        mode: 'walking'\n    }, {\n        label: 'Pedalando',\n        mode: 'bicycling'\n    }, {\n        label: 'Transporte Público',\n        mode: 'transit'\n    }\n];\n\nconst transitModes: ITransitModeOptions[] = [\n    {\n        label: 'Ônibus',\n        mode: 'bus'\n    }, {\n        label: 'Metrô',\n        mode: 'subway'\n    }, {\n        label: 'Trem',\n        mode: 'train'\n    },\n];\n\nexport {\n    traficModes,\n    transitModes\n}\n","//https://console.developers.google.com/apis/dashboard?project=still-tensor-271919\nconst GOOGLE_MAPS_PLATAFORM_API_KEY = 'AIzaSyC2IdkXtXRKxKhQVBBw-XyKA_PazKAo1Js';\nconst PROXY_URL = 'https://cors-anywhere.herokuapp.com/';\n\nexport {\n    GOOGLE_MAPS_PLATAFORM_API_KEY,\n    PROXY_URL\n}","const serialize = (obj: any = {}) => {\n    const str = [];\n\n    for (const p in obj) {\n        if (obj.hasOwnProperty(p)) {\n            str.push(encodeURIComponent(p) + '=' + encodeURIComponent(obj[p]));\n        }\n    }\n\n    return str.join('&');\n};\n\n//\n// function paramsToObject(params): object {\n//     const urlParams = new URLSearchParams(params);\n//     // @ts-ignore\n//     const entries = urlParams.entries();\n//     const result = {};\n//     for (const entry of entries) { // each 'entry' is a [key, value] tupple\n//         const [key, value] = entry;\n//         result[key] = value;\n//     }\n//     return result;\n// }\n//\nfunction cleanEmptyPropetiesFromObjects(obj: any) {\n    return JSON.parse(JSON.stringify(obj));\n}\n//\n// function extractHtmlTags(html): string {\n//     const el: HTMLElement = document.createElement('div');\n//     el.innerHTML = html;\n//     return el.firstElementChild ? el.firstElementChild.textContent : '';\n// }\n//\n// function decodeEntities(str: string): string {\n//     const element = document.createElement('div');\n//\n//     if (str && typeof str === 'string') {\n//         str = str.replace(/<script[^>]*>([\\S\\s]*?)<\\/script>/gmi, '');\n//         str = str.replace(/<\\/?\\w(?:[^\"'>]|\"[^\"]*\"|'[^']*')*>/gmi, '');\n//         element.innerHTML = str;\n//         str = element.textContent;\n//         element.textContent = '';\n//     }\n//\n//     return str;\n// }\n//\n// function getMimeType(url: string): string {\n//     const regex = /[^.]+$/;\n//     const match = regex.exec(url);\n//     const ext = match && match.length > 0 && match[0];\n//\n//     switch (ext) {\n//         case 'webm':\n//             return 'video/webm';\n//         case 'mp4':\n//             return 'video/mp4';\n//         case 'jpg':\n//         case 'jpeg':\n//             return 'image/jpeg';\n//         case 'png':\n//             return 'image/png';\n//     }\n// }\n//\n// function getExtension(url: string): string {\n//     const regex = /[^.]+$/;\n//     const match = regex.exec(url);\n//     return match ? match.length > 0 && match[0] : undefined;\n// }\n\nexport {\n    serialize,\n    // paramsToObject,\n    cleanEmptyPropetiesFromObjects,\n    // extractHtmlTags,\n    // decodeEntities,\n    // getMimeType,\n    // getExtension\n}","import {\n    IDistanceMatrix,\n    IDistanceMatrixResponse\n} from \"./google-maps-plataform.models\";\n\nfunction buildDistanceList(list: IDistanceMatrixResponse, destinations: string[]): IDistanceMatrix[] {\n    return list.destination_addresses\n        .map((address: string, index: number): IDistanceMatrix => {\n            const { distance, duration, fare, status } = list.rows[0].elements[index];\n\n            return {\n                fullAddress: address,\n                address: destinations[index],\n                distance,\n                duration,\n                fare,\n                status\n            }\n        })\n        .filter((address: IDistanceMatrix) =>\n            address.status === 'OK'\n            && address.distance\n            && address.duration\n        )\n}\n\nfunction orderDistanceListByDistance(list: IDistanceMatrix[]): IDistanceMatrix[] {\n    return list.sort((a: IDistanceMatrix, b: IDistanceMatrix) =>\n        a.distance.value - b.distance.value);\n}\n\nfunction orderDistanceListByDuration(list: IDistanceMatrix[]): IDistanceMatrix[] {\n    return list.sort((a: IDistanceMatrix, b: IDistanceMatrix) =>\n        a.duration.value - b.duration.value);\n}\n\nfunction orderDistanceListByFare(list: IDistanceMatrix[]): IDistanceMatrix[] {\n    return list.sort((a: IDistanceMatrix, b: IDistanceMatrix) =>\n        a.fare.value - b.fare.value);\n}\n\nexport {\n    buildDistanceList,\n    orderDistanceListByDistance,\n    orderDistanceListByDuration,\n    orderDistanceListByFare\n}","import {\n    IDistanceMatrix,\n    IDistanceMatrixParametres,\n    IDistanceMatrixParametresRequest,\n    IDistanceMatrixResponse\n} from \"./google-maps-plataform.models\";\nimport {GOOGLE_MAPS_PLATAFORM_API_KEY, PROXY_URL} from \"./google-maps-plataform.constants\";\nimport {cleanEmptyPropetiesFromObjects, serialize} from \"../util/util.service\";\nimport {buildDistanceList} from \"./google-maps-plataform.service\";\nimport {IGroup} from \"../group/group.models\";\nimport {getGroupList} from \"../group/group.service\";\n\n//https://developers.google.com/maps/documentation/distance-matrix/intro?hl=pt-br\nasync function getDistanceMatrix(distanceParams: IDistanceMatrixParametres): Promise<IDistanceMatrix[] | []> {\n    const params:IDistanceMatrixParametres = cleanEmptyPropetiesFromObjects(distanceParams)\n    const address: string[] = await getDestinationAddress();\n    const destinations: string = buildUrlDestinationParams(address);\n    const origins: string = buildUrlOriginsParams(params);\n    const queryString: string = buildUrlQueryString(params, GOOGLE_MAPS_PLATAFORM_API_KEY);\n    const url: string = `${PROXY_URL}https://maps.googleapis.com/maps/api/distancematrix/json?${queryString}${origins}${destinations}`;\n    return await fetchDistanceMatrix(url, address);\n}\n\nasync function getDestinationAddress(): Promise<string[]> {\n    const groups: IGroup[] = await getGroupList();\n    return groups.map(group => group.address);\n}\n\nfunction buildUrlDestinationParams(address: string[]): string {\n    const destinationsQueryString = address.join('|').replace(/ /g, '+');\n    return `&destinations=${destinationsQueryString}`;\n}\n\nfunction buildUrlOriginsParams(params: IDistanceMatrixParametres): string {\n    const originsQueryString = params.origins.join('|').replace(/ /g, '+');\n    return `&origins=${originsQueryString}`;\n}\n\nfunction buildUrlQueryString(params: IDistanceMatrixParametres, key: string): string {\n    const requestParams: IDistanceMatrixParametresRequest = {\n        ...params,\n        key\n    };\n    return serialize(requestParams);\n}\n\nasync function fetchDistanceMatrix(url: string, destinations: string[]): Promise<IDistanceMatrix[] | []> {\n    const response: Response = await fetch(url);\n    const data: IDistanceMatrixResponse = await response.json();\n    return buildDistanceList(data, destinations);\n}\n\nexport {\n    getDistanceMatrix\n}\n","import {IAddress} from \"./viacep.models\";\n\nasync function getAddessByCep(cep: string): Promise<IAddress> {\n    const url: string = `https://viacep.com.br/ws/${cep}/json/`;\n    const response: Response = await fetch(url);\n    return await response.json();\n}\n\nexport {\n    getAddessByCep\n}","import React, {useEffect, useRef, useState} from \"react\";\nimport {traficModes, transitModes} from \"../find-destination.service\";\nimport {ITraficModeOptions, ITransitModeOptions} from \"../find-destination.models\";\nimport {IAddress} from \"../../../services/viacep/viacep.models\";\nimport {\n    IDistanceMatrix,\n    IDistanceMatrixParametres,\n    ITraficMode,\n    ITransitMode\n} from \"../../../services/google-maps-plataform/google-maps-plataform.models\";\nimport {getDistanceMatrix} from \"../../../services/google-maps-plataform/google-maps-plataform.api\";\nimport {\n    orderDistanceListByDistance,\n    orderDistanceListByDuration,\n    orderDistanceListByFare\n} from \"../../../services/google-maps-plataform/google-maps-plataform.service\";\nimport {getAddessByCep} from \"../../../services/viacep/viacep.api\";\nimport {CEP_REGEX} from \"../../../constants/constants\";\n\ninterface IFindDestinationForm {\n    setDistance:  React.Dispatch<React.SetStateAction<IDistanceMatrix[]>>\n}\n\nfunction FindDestinationForm(prop: IFindDestinationForm) {\n    // TODO: TRATAR CEP INEXISTENTE / NÃO ENCONTRADO\n    // TODO: OBTER CEP DA API DO NAVEGADOR\n\n    const { setDistance } = prop;\n\n    const traficModeSelect = useRef(null);\n    const transitModeSelect = useRef(null);\n    const originCepInput = useRef(null);\n\n    const [originCep, setOriginCep] = useState<string>('');\n    const [address, setAddress] = useState<IAddress | undefined>();\n    const [traficMode, setTraficMode] = useState<ITraficMode>();\n    const [transitMode, setTransitMode] = useState<ITransitMode>();\n    const [sortBy, setSortBy] = useState<'nearest' | 'faster' | 'cheap' | undefined>();\n    const [loading, setLoading] = useState<boolean>(false)\n\n    const getDistance = async () => {\n        setDistance([]);\n        setLoading(true);\n\n        const params: IDistanceMatrixParametres = {\n            origins: [originCep],\n            mode: traficMode,\n            transit_mode: transitMode\n        };\n\n        const addressList: IDistanceMatrix[] | [] = await getDistanceMatrix(params);\n\n        switch (sortBy) {\n            case 'faster':\n                setDistance(orderDistanceListByDuration(addressList));\n                break;\n            case 'nearest':\n                setDistance(orderDistanceListByDistance(addressList));\n                break;\n            case 'cheap':\n                setDistance(orderDistanceListByFare(addressList));\n                break;\n            default:\n                setDistance(orderDistanceListByDistance(addressList));\n        }\n\n        setLoading(false);\n    };\n\n    const getAddress = async (cep: string) => {\n        const address = cep ? await getAddessByCep(cep) : undefined;\n        await setAddress(address)\n    };\n\n    const handleOriginCep = () => {\n        // @ts-ignore-next-line\n        const value = originCepInput.current.value;\n        const match = CEP_REGEX.exec(value);\n        match && setOriginCep(match[0]);\n    };\n\n    const handleTraficMode = () => {\n        // @ts-ignore-next-line\n        setTraficMode(traficModeSelect.current.value);\n    };\n\n    const handelTransitMode = () => {\n        // @ts-ignore-next-line\n        setTransitMode(transitModeSelect.current.value);\n    };\n\n    useEffect(() => {\n        handleTraficMode();\n        getAddress(originCep);\n    }, [originCep]);\n\n    useEffect(() => {\n        if(traficMode === 'transit') {\n            handelTransitMode();\n        } else {\n            setTransitMode(undefined)\n        }\n    }, [traficMode]);\n\n    useEffect(() => {\n        originCep && sortBy && getDistance();\n    }, [sortBy, originCep, traficMode, transitMode]);\n\n\n    return <div>\n        <label>\n            Meu CEP:\n            <input type=\"text\"\n                   ref={originCepInput}\n                   onKeyUp={handleOriginCep}\n                   disabled={loading}\n            />\n        </label>\n\n        {\n            address &&\n            <div>\n                <p>{address.cep}</p>\n                <p>{address.logradouro}</p>\n                <p>{address.complemento}</p>\n                <p>{address.bairro}</p>\n                <p>{address.localidade}</p>\n                <p>{address.uf}</p>\n            </div>\n        }\n\n        <br/>\n\n        <label>\n            Pretendo ir:\n            <select name=\"\" id=\"\"\n                    ref={traficModeSelect}\n                    onChange={handleTraficMode}\n                    disabled={loading}\n            >\n                {\n                    traficModes.map((mode: ITraficModeOptions, index: number) =>\n                        <option\n                            key={index}\n                            value={mode.mode}\n                        >{mode.label}</option>\n                    )\n                }\n            </select>\n        </label>\n\n        <br/>\n\n        {\n            traficMode === 'transit' && <label>\n                Meio de transporte preferencial:\n                <select name=\"\" id=\"\"\n                        ref={transitModeSelect}\n                        onChange={handelTransitMode}\n                        disabled={loading}\n                >\n                    {\n                        transitModes.map((mode: ITransitModeOptions, index: number) =>\n                            <option\n                                key={index}\n                                value={mode.mode}\n                            >{mode.label}</option>\n                        )\n                    }\n                </select>\n            </label>\n        }\n\n        <br/>\n\n        <button\n            onClick={() => setSortBy('nearest')}\n            disabled={!originCep || loading}\n        >Encontre o mais próximo próximo</button>\n\n        <br/>\n\n        <button\n            onClick={() => setSortBy('faster')}\n            disabled={!originCep || loading}\n        >Encontre o mais rápido para chegar</button>\n\n        <br/>\n\n        {\n            transitMode &&\n            <button\n                onClick={() => setSortBy('cheap')}\n                disabled={!originCep || loading}\n            >O mais barato</button>\n        }\n    </div>\n}\n\nexport default FindDestinationForm;","import React, {useState} from \"react\";\nimport DestinationList from \"./destination-list/DestinationList\";\nimport FindDestinationForm from \"./find-destination-form/FindDestinationForm\";\nimport {IDistanceMatrix} from \"../../services/google-maps-plataform/google-maps-plataform.models\";\n\nfunction FindDestination() {\n    const [distance, setDistance] = useState<IDistanceMatrix[]>([]);\n\n    return (\n        <div>\n            <FindDestinationForm setDistance={setDistance} />\n            <DestinationList distance={distance}/>\n        </div>\n    )\n}\n\nexport default FindDestination;","import React from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport FindDestination from \"../../shared/components/find-destination/FindDestination\";\n\nfunction MyGroup() {\n    return (\n        <div>\n            <h2>Meu Grupo</h2>\n            <FindDestination/>\n        </div>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n        //clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n    // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(MyGroup);","import React from 'react';\nimport {bindActionCreators} from \"redux\";\nimport {connect} from \"react-redux\";\nimport {Link} from \"react-router-dom\";\nimport styled from \"styled-components\";\n\nfunction Home() {\n    return (\n        <div>\n            <Title>Grupos de Crescimento Lagoinha Barra</Title>\n            <Link to=\"/meugrupo\">Quero conhecer o meu GC</Link>\n        </div>\n    )\n}\n\nconst Title = styled.h2`\n`;\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n        //clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n    // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Home);","import {Route, Switch} from \"react-router-dom\";\nimport Lider from \"../../../containers/group-lead/GroupLead\"\nimport Lideres from \"../../../containers/group-lead-list/GroupLeadList\";\nimport ListaGrupos from \"../../../containers/group-list/GroupList\";\nimport MyGroup from \"../../../containers/my-group/MyGroup\";\nimport Home from \"../../../containers/home/Home\";\nimport React from \"react\";\n\nfunction SwitchRoute() {\n    return (\n        <Switch>\n            {/* A <Switch> looks through its children <Route>s and\n            renders the first one that matches the current URL. */}\n            <Route path=\"/lider/:alias\">\n                <Lider />\n            </Route>\n            <Route path=\"/lideres\">\n                <Lideres />\n            </Route>\n            <Route path=\"/grupos\">\n                <ListaGrupos />\n            </Route>\n            <Route path=\"/meugrupo\">\n                <MyGroup />\n            </Route>\n            <Route path=\"/\">\n                <Home />\n            </Route>\n        </Switch>\n    )\n}\n\nexport default SwitchRoute;","import {Link} from \"react-router-dom\";\nimport React from \"react\";\n\nfunction Navigation() {\n    return (\n        <nav>\n            <ul>\n                <li>\n                    <Link to=\"/\">Home</Link>\n                </li>\n                <li>\n                    <Link to=\"/lideres\">Líderes</Link>\n                </li>\n                <li>\n                    <Link to=\"/grupos\">Grupos de Crescimento</Link>\n                </li>\n                <li>\n                    <Link to=\"/meugrupo\">Conhecer meu Grupo</Link>\n                </li>\n            </ul>\n        </nav>\n    )\n}\n\nexport default Navigation;","import React from 'react';\nimport styled from 'styled-components';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport {connect} from 'react-redux';\nimport {bindActionCreators} from 'redux';\nimport SwitchRoute from \"./shared/components/switch-route/SwitchRoute\";\nimport Navigation from \"./shared/components/navigation/Navigation\";\n\nfunction App() {\n    // TODO CONVERTER EM PWA\n  return (\n      <Router>\n        <div>\n          <Title>Hub GC</Title>\n          <Navigation/>\n          <SwitchRoute />\n        </div>\n      </Router>\n  );\n}\n\nconst Title = styled.h1`\n`;\n\nconst mapDispatchToProps = (dispatch: any) =>\n    bindActionCreators({\n      // clickButton\n    }, dispatch);\n\nconst mapStateToProps = (store: any) => ({\n  // newValue: store.clickState.newValue\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(App);","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { CLICK_UPDATE_VALUE } from '../actions/actionTypes';\nconst initialState = {\n    newValue: 'Atualizado via Redux!'\n};\nfunction clickReducer(state = initialState, action: { type: any; newValue: any; }) {\n    switch (action.type) {\n        case CLICK_UPDATE_VALUE:\n            return {\n                ...state,\n                newValue: action.newValue\n            };\n        default:\n            return state;\n    }\n}\n\nexport {\n    clickReducer\n}","import { clickReducer } from './clickReducer';\n//import { OtherReducer } from './otherReducer';\nimport { combineReducers } from 'redux';\nexport const Reducers = combineReducers({\n    clickState: clickReducer,\n    //otherState: otherReducer\n});","export const CLICK_UPDATE_VALUE = 'CLICK_UPDATE_VALUE';","import { createStore } from 'redux';\nimport { Reducers } from '../reducers';\nexport const Store = createStore(Reducers);","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport { Store } from './store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={Store}>\n        <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}